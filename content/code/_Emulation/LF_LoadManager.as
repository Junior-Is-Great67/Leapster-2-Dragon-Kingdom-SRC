#include "content/code/_Emulation/com.qlod.LoaderClass.as"/***	Constructor*	Define a singleton class that handles loading of assets.*/_global.LF_LoadManager = function(){	trace("LF_LoadManager()");	// track the currently active section loading	this._iCurrentSection = 0;	// there is one loader and listener for each section	this._aLoaders = new Array();	this._aListeners = new Array();}LF_LoadManager.prototype.getCurrentSection = function(){	return this._iCurrentSection;}/***	Enqueues a SWF for a given section.*/LF_LoadManager.prototype.loadSWF = function(sPath, iSection){	trace("LF_LoadManager.loadSWF("+sPath+", "+iSection+")");	// todo: check if we are adding something for a previous section	if ( this._aLoaders[iSection] == null )	{		this._createQueue(iSection);	}	// todo: figure out where to load this	var mc = createEmptyMovieClip("myClip_mc", 1);	this._aLoaders[iSection].load(mc, sPath);}/***	Enqueues an MP3 for a given section.*/LF_LoadManager.prototype.loadMP3 = function(sPath, iSection){	trace("LF_LoadManager.loadMP3("+sPath+", "+iSection+")");	// todo: check if we are adding something for a previous section	if ( this._aLoaders[iSection] == null )	{		this._createQueue(iSection);	}	// todo: figure out where to load this	var snd = new Sound();	// do not stream this, just load it	this._aLoaders[iSection].load(snd, sPath);}/***	Returns true if the section is loaded, false otherwise.*	Assumes that if we are at some section, all media from the previous section has been loaded.*/LF_LoadManager.prototype.isSectionLoaded = function(iSection){	if ( this._aLoaders[iSection].isLoading() )	{		return false;	}	return ( iSection <= this._iCurrentSection );}/***	Returns true if this section is currently loading.*	Is this useful?*/LF_LoadManager.prototype.isSectionLoading = function(iSection){	return this._aLoaders[iSection].isLoading();}// --- private methods ---/***	When a queue is done, increment the current section and activate that queue.*/LF_LoadManager.prototype.onQueueStop = function(iSection){	trace("LF_LoadManager.onQueueStop("+iSection+")");	// var iOriginalSection = this._iCurrentSection;		// in case a previous queue is sending this message, perform this check	if ( iSection == this._iCurrentSection )	{		this._iCurrentSection++;		this._aLoaders[this._iCurrentSection].setActive(true);		this._aLoaders[this._iCurrentSection].startLoading();	}	//trace("this._iCurrentSection: "+this._iCurrentSection);	//trace("  loading: "+this._aLoaders[this._iCurrentSection].isLoading());}LF_LoadManager.prototype._createQueue = function(iSection){	trace("LF_LoadManager.prototype._createQueue("+iSection+")");	this._aLoaders[iSection] = new com.qlod.LoaderClass();		//if ( iSection == this._iCurrentSection )	//{	//	this._aLoaders[iSection].setActive(true);	//}		// attach a listener	this._aListeners[iSection] = new LF_LoadManagerListener(iSection, this);	this._aLoaders[iSection].addListener(this._aListeners[iSection]);}/***	Constructor*	Listener for each LoadManager.*	todo: make only one and put it in the init function of the LoadManager class.*/LF_LoadManagerListener = function(iSection, oManager){	trace("LF_LoadManagerListener()");	this.iSection = iSection;	this.manager = oManager;}/***	By default, each queue is de-activated.  Activate if this is the current queue.*/LF_LoadManagerListener.prototype.onQueueStart = function(oLoader){	trace("LF_LoadManagerListener.onQueueStart("+oLoader+")");	// check to see if this is okay to start	if ( this.manager.getCurrentSection() == this.iSection )	{		oLoader.setActive(true);	}}/***	This event is fired when the queue exhausts.*/LF_LoadManagerListener.prototype.onQueueStop = function(oLoader){	trace("LF_LoadManagerListener.onQueueStop("+oLoader+")");	this.manager.onQueueStop(this.iSection);}LF_LoadManagerListener.prototype.onLoadStart = function(oLoader){}LF_LoadManagerListener.prototype.onLoadComplete = function(oLoader){}LF_LoadManagerListener.prototype.onLoadTimeout = function(oLoader){}LF_LoadManagerListener.prototype.onLoadProgress = function(oLoader){}