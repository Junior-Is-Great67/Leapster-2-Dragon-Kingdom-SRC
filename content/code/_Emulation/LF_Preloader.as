#include "content/code/_Emulation/LF_LoadManager.as"_global.LF_Preloader = function(){	this.oLM = new LF_LoadManager();	// todo: get this from xml	this.sAudioDir = 'content/dragons/audio/mp3/';	this.sSwfDir = 'content/dragons/movies/swf/';}LF_Preloader.prototype.load = function(sXMLPath){	trace("LF_Preloader.load("+sXMLPath+")");	if (sXMLPath==null || sXMLPath=="")	{		trace("Error:  No path provided.");		return;	}	var oXMLParser = new XMLHandleParser();	oXMLParser.setManager(this);	oXMLParser.load(sXMLPath);}LF_Preloader.prototype.isSectionLoaded = function(iSection){	return this.oLM.isSectionLoaded(iSection);}LF_Preloader.prototype.getCurrentSection = function(){	return this.oLM.getCurrentSection();}LF_Preloader.prototype.getCurrentSection = function(){	return this.oLM.getCurrentSection();}LF_Preloader.prototype.onSwfHandle = function(sHandle, iSection){	trace("LF_Preloader.onSwfHandle("+sHandle+", "+iSection+")");	//var sPath = this.sSwfDir+sHandle+".swf";	var sPath = this.sSwfDir+sHandle+".swf";	this.oLM.loadSWF(sPath, iSection);}LF_Preloader.prototype.onAudioHandle = function(sHandle, iSection){	trace("LF_Preloader.onAudioHandle("+sHandle+", "+iSection+")");	//var sPath = this.sAudioDir+sHandle+".mp3";	var sPath = this.sAudioDir+sHandle+".mp3";	this.oLM.loadMP3(sPath, iSection);}/***	Extends the XML object.*/XMLHandleParser = function(sXML){	trace("XMLHandleParser("+sXML+")");	super(sXML);	this.oXML = new Object();	this.ignoreWhite = true;}// extends the XML classXMLHandleParser.prototype = new XML();XMLHandleParser.prototype.setManager = function(oManager){	this.manager = oManager;}XMLHandleParser.prototype.onLoad = function(bSuccess){	trace("XMLHandleParser.onLoad("+bSuccess+")");	if ( bSuccess )	{		var strNodeName;		var aNodes = this.childNodes;		var iNodes = aNodes.length;		for ( var i=0; i<iNodes; i++ )		{			strNodeName = aNodes[i].nodeName;			trace(strNodeName);			if (strNodeName == "data")			{				this.parseDataNode(aNodes[i]);			}		}	}	else	{		trace("ERROR:  XMLHandleParser.onLoad");	}}XMLHandleParser.prototype.parseDataNode = function(oXMLNode){	var aNodes = oXMLNode.childNodes;	var iNodes = aNodes.length;	var strNodeName;	for ( var i=0; i<iNodes; i++ )	{		strNodeName = aNodes[i].nodeName;		//trace("\t"+strNodeName);		if ( strNodeName == 'rounds' )		{			this.parseRoundsNode(aNodes[i]);		}	}}XMLHandleParser.prototype.parseRoundsNode = function(oXMLNode){	var aNodes = oXMLNode.childNodes;	var iNodes = aNodes.length;	var strNodeName;	for ( var i=0; i<iNodes; i++ )	{		strNodeName = aNodes[i].nodeName;		//trace("\t\t"+strNodeName);		if ( strNodeName == 'round' )		{			this.parseRoundNode(aNodes[i]);		}	}}XMLHandleParser.prototype.parseRoundNode = function(oXMLNode){	var aNodes = oXMLNode.childNodes;	var iNodes = aNodes.length;	var strNodeName;	var iRound = oXMLNode.attributes["roundNum"];	trace("iRound: "+iRound);	for ( var i=0; i<iNodes; i++ )	{		strNodeName = aNodes[i].nodeName;		//trace("\t\t\t"+strNodeName);		if ( strNodeName == 'swfHandle' )		{			this.parseSwfHandleNode(aNodes[i], iRound);		}		else if ( strNodeName == 'audioHandle' )		{			this.parseAudioHandleNode(aNodes[i], iRound);		}	}}XMLHandleParser.prototype.parseSwfHandleNode = function(oXMLNode, iRound){	var sNode = oXMLNode.firstChild.nodeValue;	//trace("sNode: "+sNode);	this.manager.onSwfHandle(sNode, iRound);}XMLHandleParser.prototype.parseAudioHandleNode = function(oXMLNode, iRound){	var sNode = oXMLNode.firstChild.nodeValue;	//trace("sNode: "+sNode);	this.manager.onAudioHandle(sNode, iRound);}//pp: ugly hacked preloader to get this to work...//someone please pretty me up//will only work with incredibles title for now//TODO: DW pretty up preloaderfunction startIntroPreloader() {	loadStatusTxt += "startIntroPreloader";	loadStatusTxt += "currentRound:"+_level0.mcLeapster.mcScreen.mcHolder.iCurrentRound+"\n";	loadStatusTxt += "starting preload...\n";	isPreLoadIntro = true;	myCurrentRound = 0;	mcLeapster.mc_preLoader.gotoAndPlay("loop");}myLastRound = -1;function startPreLoader(sStatus) {	isPreLoadIntro = false;	loadStatusTxt += "startPreLoader:"+sStatus+"\n";	loadStatusTxt += "currentRound:"+_level0.mcLeapster.mcScreen.mcHolder.iCurrentRound+"\n";	myCurrentRound = _level0.mcLeapster.mcScreen.mcHolder.iCurrentRound+1;	LF_stopAllAudio();	_LEAPSTER_TOP.mcLeapster.mc_preLoader.sStatus = sStatus;	if(sStatus != "uncovered") {		if(sStatus == null) {		//if(myCurrentRound != myLastRound) {			//start the preloader			loadStatusTxt += "starting preload...\n";			if(myCurrentRound != myLastRound) {				mcLeapster.mc_preLoader.gotoAndPlay("loop");				myLastRound = myCurrentRound;			}			else {				_LEAPSTER_TOP.mcLeapster.mcScreen.mcHolder.showPuzzle2(sStatus);			}		}		else _LEAPSTER_TOP.mcLeapster.mcScreen.mcHolder.showPuzzle2(sStatus);		return;	}	_LEAPSTER_TOP.mcLeapster.mcScreen.mcHolder.showPuzzle2(sStatus);}function endPreLoader() {	loadStatusTxt += "endPreLoader\n";	_LEAPSTER_TOP.mcLeapster.mc_preLoader.gotoAndPlay("init");	if(isPreLoadIntro) {		loadStatusTxt += "continue\n";		_LEAPSTER_TOP.mcLeapster.mcScreen.mcHolder.mcBase.gotoAndPlay("continue");	}	else {		_LEAPSTER_TOP.mcLeapster.mcScreen.mcHolder.showPuzzle2(_level0.mcLeapster.mc_preLoader.sStatus);	}}