// LF_Audio.as// Description:	Leapster Audio emulation// Platform:	Flash Player 5 or later versions// Actionscript:	1.0// Author:		Johnny Ngotrace("*** Loading LF_Audio Emulation ssdsdsddsds");if (typeof _global != "object") _global =_root;	// a hack for Flash 5// "MIDI" playerscreateEmptyMovieClip("mcAudioPlayer_FgMidi", 0x200);_global.LF_AUDIO_FGMIDI 		= new LF_Sound(0x200, mcAudioPlayer_FgMidi, false);createEmptyMovieClip("mcAudioPlayer_BgMidi", 0x201);_global.LF_AUDIO_BGMIDI 		= new LF_Sound(0x201, mcAudioPlayer_BgMidi, false);// RAW Players_global.LF_AUDIO_TONE_NUM	= 7;createEmptyMovieClip("mcAudioPlayer_Tone0", 0x400);_global.LF_AUDIO_TONE_0		= new LF_Sound(0x400, mcAudioPlayer_Tone0, false);createEmptyMovieClip("mcAudioPlayer_Tone1", 0x401);_global.LF_AUDIO_TONE_1		= new LF_Sound(0x401, mcAudioPlayer_Tone1, false);createEmptyMovieClip("mcAudioPlayer_Tone2", 0x402);_global.LF_AUDIO_TONE_2		= new LF_Sound(0x402, mcAudioPlayer_Tone2, false);createEmptyMovieClip("mcAudioPlayer_Tone3", 0x403);_global.LF_AUDIO_TONE_3		= new LF_Sound(0x403, mcAudioPlayer_Tone3, false);createEmptyMovieClip("mcAudioPlayer_Tone4", 0x404);_global.LF_AUDIO_TONE_4		= new LF_Sound(0x404, mcAudioPlayer_Tone4, false);createEmptyMovieClip("mcAudioPlayer_Tone5", 0x405);_global.LF_AUDIO_TONE_5		= new LF_Sound(0x405, mcAudioPlayer_Tone5, false);createEmptyMovieClip("mcAudioPlayer_Tone6", 0x406);_global.LF_AUDIO_TONE_6		= new LF_Sound(0x406, mcAudioPlayer_Tone6, false);// LFC PlayerscreateEmptyMovieClip("mcAudioPlayer_LFC", 0x800);_global.LF_AUDIO_LFC			= new LF_Sound(0x800, mcAudioPlayer_LFC, false);// just an array of all players - for easy reference_global.LF_ALL_AUDIO_PLAYERS	= new Array(	_global.LF_AUDIO_FGMIDI,	_global.LF_AUDIO_BGMIDI,	_global.LF_AUDIO_TONE_0,	_global.LF_AUDIO_TONE_1,	_global.LF_AUDIO_TONE_2,	_global.LF_AUDIO_TONE_3,	_global.LF_AUDIO_TONE_4,	_global.LF_AUDIO_TONE_5,	_global.LF_AUDIO_TONE_6,	_global.LF_AUDIO_LFC	);//-----------------------------------------------------------------------------------------_global.LF_AudioCallback = null;_global.LF_onSoundComplete = function(fnCallback)// call this function to register the callback{	trace("LF_onSoundComplete: "+fnCallback);	LF_AudioCallback = fnCallback;	trace("LF_AudioCallback (register): "+LF_AudioCallback);}_global.testFunction = function(){	trace("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhello");}//-----------------------------------------------------------------------------------------_global.LF_GetAudioPlayer =  function(iPID){	switch(iPID)	{		case 0x200:			return LF_AUDIO_FGMIDI;		case 0x201:			return LF_AUDIO_BGMIDI;		case 0x400:			return LF_AUDIO_TONE_0;		case 0x401:			return LF_AUDIO_TONE_1;		case 0x402:			return LF_AUDIO_TONE_2;		case 0x403:			return LF_AUDIO_TONE_3;		case 0x404:			return LF_AUDIO_TONE_4;		case 0x405:			return LF_AUDIO_TONE_5;		case 0x406:			return LF_AUDIO_TONE_6;				case 0x800:			return LF_AUDIO_LFC;				default:			return null;	}	}//-----------------------------------------------------------------------------------------_global.LF_PlayFgMIDI =  function(sHandle, bCallback, iVolume){	trace("DW - LF_PlayFgMIDI called with "+sHandle)		LF_PlayAudioOn(LF_AUDIO_FGMIDI, sHandle, bCallback, iVolume);}//-----------------------------------------------------------------------------------------_global.LF_StopFgMIDI =  function(){		LF_AUDIO_FGMIDI.stop();}//-----------------------------------------------------------------------------------------_global.LF_PlayBgMIDI =  function(sHandle, bCallback, iVolume){		trace("DW - LF_PlayBgMIDI called with "+sHandle)	LF_AUDIO_BGMIDI.setLoop(10); //set all bg midis to loop 10 times	LF_AUDIO_BGMIDI.setStreaming(true);//DW - set to false if you want looping- looping doesn't work with streaming sounds - event sounds must be pre=loaded	LF_PlayAudioOn(LF_AUDIO_BGMIDI, sHandle, bCallback, iVolume);}//-----------------------------------------------------------------------------------------_global.LF_StopBgMIDI =  function(){	LF_AUDIO_BGMIDI.stop();}//-----------------------------------------------------------------------------------------_global.LF_PlayMidiOn =  function(oPlayer, sHandle, bCallback, iVolume){	LF_PlayAudioOn(oPlayer, sHandle, bCallback, iVolume);}//-----------------------------------------------------------------------------------------_global.LF_PlayAudioRawOn =  function(oPlayer, sHandle, bCallback, iVolume){	LF_PlayAudioOn(oPlayer, sHandle, bCallback, iVolume);}//-----------------------------------------------------------------------------------------_global.LF_PlayAudioRaw =  function(sHandle, bCallback, iVolume){	trace("DW - LF_PlayAudioRaw called with "+ sHandle + " "+ bCallback + " "+iVolume);	for (var i=0; i<LF_AUDIO_TONE_NUM; i++)	{		var oRawPlayer = eval("LF_AUDIO_TONE_" + i);		trace("DW - checking player "+ i + " oRawPlayer.ID = "+oRawPlayer.ID + " oCurrentSound.sID "+oRawPlayer.oCurrentSound.sID);		if (oRawPlayer.isStop())	// find the first available Raw player		{			LF_PlayAudioOn(oRawPlayer, sHandle, bCallback, iVolume);			//PP - added this to work with sequencer - only one sound at a time!			//return 0x400;			trace("DW oRawPlayer.ID = "+ oRawPlayer.ID);			//DW added the ability to return an allocated player id			return oRawPlayer.ID		}	}}//-----------------------------------------------------------------------------------------_global.LF_PlayLFC =  function(sHandle, bCallback, iVolume){	//LC - trying to hijack the LFC to play RAW instead.	//return LF_PlayAudioRaw(sHandle, bCallback, iVolume)	LF_PlayAudioOn(LF_AUDIO_LFC, sHandle, bCallback, iVolume);	//PP - added this to work with sequencer - only one sound at a time!	return 0x800;}// GENERAL AUDIO FUNCTIONS ////////////////////////////////////////////////-----------------------------------------------------------------------------------------_global.LF_IsAudioPlayerBusy =  function(oPlayer){	return oPlayer.isBusy();}//-----------------------------------------------------------------------------------------_global.LF_StopAudioPlayer =  function(oPlayer){	trace("DW - LF_StopAudioPlayer");	if(typeof oPlayer == "number")	{		trace("DW - oPlayer number = "+ oPlayer)		oPlayer = LF_GetAudioPlayer(oPlayer);		trace("DW - oPlayer = "+ oPlayer)	}	oPlayer.stop();	}//-----------------------------------------------------------------------------------------_global.LF_PauseAudioPlayer =  function(oPlayer){	oPlayer.pause();}//-----------------------------------------------------------------------------------------_global.LF_ResumeAudioPlayer =  function(oPlayer){	oPlayer.unpause();}//-----------------------------------------------------------------------------------------_global.LF_SetAudioPlayerVolume =  function(oPlayer, iVolume){	trace("DW - Set volume called "+iVolume)	oPlayer.setVolume(iVolume);	// volume}//-----------------------------------------------------------------------------------------_global.LF_GetAudioPlayerVolume =  function(oPlayer){	oPlayer.getVolume();	// volume}//-----------------------------------------------------------------------------------------_global.LF_StopAllAudio =  function(){	for (var i=0; i<LF_ALL_AUDIO_PLAYERS.length; i++)		LF_ALL_AUDIO_PLAYERS[i].stop();}//-----------------------------------------------------------------------------------------_global.LF_PauseAllAudio =  function(){	for (var i=0; i<LF_ALL_AUDIO_PLAYERS.length; i++)		LF_ALL_AUDIO_PLAYERS[i].pause();}//-----------------------------------------------------------------------------------------_global.LF_ResumeAllAudio =  function(){	for (var i=0; i<LF_ALL_AUDIO_PLAYERS.length; i++)		LF_ALL_AUDIO_PLAYERS[i].unpause();}//-----------------------------------------------------------------------------------------_global.LF_PlayAudioOn =  function(oPlayer, sHandle, bCallback, iVolume){	trace("DW - LF_PlayAudioOn called ")	//if a sound was canceled and it is still in the player stop it, force the callback and remove it from the player then continue with the new sound	oPlayer.stop();	//oPlayer.onComplete();	oPlayer.onComplete(oPlayer);	oPlayer.removeAll();	oPlayer.push(sHandle, 0);	//DW - TODO: Volume is set here however if the player isn't available a new player gets used - I don't see where the new player gets it's volume set - need to make sure that the new player gets it's volume set and that the volume is reset to default after it is set	if (iVolume != null)	{		trace("DW - the volume is "+iVolume);		oPlayer.setVolume(iVolume);	// volume	}	oPlayer.onComplete = (bCallback)?(LF_AudioCallback):(null);		// callback?	oPlayer.start();	trace("PLAY AUDIO ON STARTED")}_global.LF_SetFgGasVolume = function( volNum ){	//gas not supported }_global.LF_SetBgGasVolume = function( volNum ){	//gas not supported }_global.LF_SetFgMidiVolume = function( volNum ){	LF_SetAudioPlayerVolume(LF_AUDIO_FGMIDI, volNum);}_global.LF_SetBgMidiVolume = function( volNum ){	LF_SetAudioPlayerVolume(LF_AUDIO_BGMIDI, volNum);}_global.LF_SetRawVolume = function( volNum ){	trace("DW - LF_SetRawVolume called");	for (var i=0; i<LF_AUDIO_TONE_NUM; i++)	{		var oRawPlayer = eval("LF_AUDIO_TONE_" + i);		LF_SetAudioPlayerVolume(oRawPlayer, volNum);	}}_global.LF_SetLFCVolume = function( volNum ){	trace("DW - LF_SetLFCVolume called");	LF_SetAudioPlayerVolume(LF_AUDIO_LFC, volNum);}_global.LF_SetNoteVolume = function( volNum ){	//note not supported }