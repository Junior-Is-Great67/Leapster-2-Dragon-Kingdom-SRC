 // IA.as  emulation code for international audio calls_global.IAX_GetXML = function(xmlObj, inString){		trace("DW - IAX_GetXML CALLED!!!!!!!!!!!!!!!!");	trace("DW - xmlFile "+xmlObj);		var startOffset = xmlObj.audio_dataset[0].tables[0];		//get the parameters from the comma delimeted inString	strArray = inString.split(",");	for (var i = 0; i<strArray.length; i++) {	    trace("DW - string number "+ i + " = " +strArray[i]);	}	outString = [];	//for now we are ignoring the third parameter if there is one	if(strArray.length < 3){		theTableItemNum = parseInt(strArray[0]);		//trace("DW - theTableItemNum = "+theTableItemNum);		theIDNum = parseInt(strArray[1]);		//trace("DW - theIDNum = "+theIDNum);		theTableItem = startOffset.table[theTableItemNum];		//trace("DW - theTableItem = "+theTableItem)		theTableIds = theTableItem.ids[0].id		//trace("DW - theTableIds = "+theTableIds);		theTableIdsLength = theTableIds.length		//trace("DW - theTableIdsLength = "+theTableIdsLength);				for(var j = 0; j<theTableIdsLength; j++){			curTableIdName = parseInt(theTableItem.ids[0].id[j].idname);			//trace("DW - curTableIdName = "+curTableIdName);			//theTableEntries = theTableItem.ids[0].id[j].cells[0].cell[0].entries[0].entry;			theTableEntriesLength = theTableEntries.length;			/*for(var i = 0; i<theTableEntriesLength; i++){				theCurEntryType = theTableEntries[i].entryType[0];				//trace("DW - theTableEntries "+ i + " entryType[0] = "+theTableEntries[i].entryType[0]);				trace("DW - theTableEntries "+ i + " entryType[0] = "+theCurEntryType);				theCurEntryHandle = theTableEntries[i].entryhandle[0];				//trace("DW - theTableEntries "+ i + " entryhandle[0] = "+theTableEntries[i].entryhandle[0]);				trace("DW - theTableEntries "+ i + " entryhandle[0] = "+theCurEntryHandle);			}*/			if (curTableIdName == theIDNum){				theTableEntries = theTableItem.ids[0].id[j].cells[0].cell[0].entries[0].entry;				//trace("DW - theTableEntries = "+theTableEntries);				theTableEntriesLength = theTableEntries.length;				//trace("DW - theTableEntriesLength = "+theTableEntriesLength);				for(var i = 0; i<theTableEntriesLength; i++){					theCurEntryType = theTableEntries[i].entryType[0];					//trace("DW - theTableEntries "+ i + " entryType[0] = "+theTableEntries[i].entryType[0]);					//trace("DW - theTableEntries "+ i + " entryType[0] = "+theCurEntryType);					theCurEntryHandle = theTableEntries[i].entryhandle[0];					//trace("DW - theTableEntries "+ i + " entryhandle[0] = "+theTableEntries[i].entryhandle[0]);					//trace("DW - theTableEntries "+ i + " entryhandle[0] = "+theCurEntryHandle);					outString.push(theCurEntryType, theCurEntryHandle);				}					}		}					}	//from the table, grab all the entryhandles			//levelCount = startOffset.table.length;	//firstTableHandle = startOffset.table[35].ids[0].id[0].cells[0].cell[0].entries[0].entry[0].entryhandle[0];	//firstTableHandle = theTableItem.ids[0].id[0].cells[0].cell[0].entries[0].entry[0].entryhandle[0];		trace("DW - inString = "+inString);	//trace("DW - levelCount = "+levelCount);	//trace("DW - firstTableHandle = "+firstTableHandle);		//return a list of entryhandles	outString = outString.toString();	trace("DW outString = "+outString);	return outString;}